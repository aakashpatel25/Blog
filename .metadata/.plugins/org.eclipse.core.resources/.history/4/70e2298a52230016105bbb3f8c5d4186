package com.Blog.Dao;

import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import com.Blog.Hibernate.HibernateDao;
import com.Blog.Service.IComments;
import com.Blog.beans.Blog;
import com.Blog.beans.Comments;
import com.Blog.beans.Users;

public class CommentsDao implements IComments{
	private static SessionFactory factory;
	
	/**
	 * CommentsDao constructor.
	 */
	public CommentsDao() {
		factory = HibernateDao.openSession();
	}

	/**
	 * To add a comment to a database on a particular blog.
	 * @param Comments
	 * 			Comment that is to be added on the blog.
	 * @return boolean
	 * 			True or false depending on the success or failure of the operation.
	 */
	@Override
	public boolean addComment(Comments comment) {
		Session session = factory.openSession();
		Transaction tx = null;
		Long commentId = new Long(0);
		try {
			tx = session.beginTransaction();
			commentId = (Long) session.save(comment);
			tx.commit();
		} catch (HibernateException e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		} finally {
			session.close();
		}
		return commentId.longValue() > 0;
	}

	@Override
	public boolean editComment(long commentId, String newComment) {
		Session session = factory.openSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			Comments comments = (Comments) session.createQuery("FROM Comment as c where c.commentId = :commentId").setParameter("commentId", commentId).uniqueResult();
			comments.setComment(newComment);
			session.update(comments);
			tx.commit();
		} catch (HibernateException e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		} finally {
			session.close();
		}
		return true;
	}

	@Override
	public boolean deleteComments(Users user, Blog blog) {
		Session session = factory.openSession();
		int result = session
				.createQuery("Delete Comment where Comment.blogId = :blogId and Comment.userId = :userId")
				.setParameter("blogId", blogId).setParameter("userId", userId)
				.executeUpdate();
		session.close();
		return result > 0;
	}

	@Override
	public boolean deleteBlogComments(long blogId) {
		Session session = factory.openSession();
		int result = session.createQuery("Delete Comment where Comment.blogId = :blogId").setParameter("blogId", blogId).executeUpdate();
		session.close();
		return result > 0;
	}

	@Override
	public Comments getComment(String username, long blogId) {
		Session session = factory.openSession();
		Comments comment = (Comments) session
				.createQuery("From Comments as c where c.BlogId=:blogId and c.userId = :username")
				.setParameter("blogId", blogId)
				.setParameter("userId", username).uniqueResult();
		session.close();
		return comment;
	}
}
