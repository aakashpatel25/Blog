package com.Blog.Dao.test;

public class UserDaoTest {
private IUser userDao;
	
	private static String[] USER_NAMES = {"sampleUser","sampleSamp","testUser","testSamp"};
	
	private static String[] PASS_WORD = {"admin123","admin"};
	
	private static String[] FIRST_NAME = {"admin","Sample","test","user"};
	
	private static String[] LAST_NAME = {"admin","Test","Sample","User"};
	
	private static String[] EMAIL = {"admin@admin.com","sample@123.com","Test@gmail.com","user@user.com"};
	
	
	public UserDaoTest(){
		userDao = new UserDao();
	}
	
	/**
	 * Creates user.
	 * 
	 * @return User Newly Created User.
	 */
	public User createOneUser(){
		User user = new User(USER_NAMES[0],PASS_WORD[0],FIRST_NAME[0],LAST_NAME[0],EMAIL[0]);
		return user;
	}
	
	/**
	 * Tests weather the createUserName() function of the UserDao works properly.
	 */
	@Test
	public void testCreateUser() {
		boolean result = userDao.createNewUser(createOneUser());
		long userId = userDao.findUserId(USER_NAMES[0]);
		User user = userDao.getUserProfile(USER_NAMES[0]);
		boolean delete = userDao.deleteUser(userId);
		assertTrue(userId > 0);
		assertTrue(result);
		assertEquals(user.getUserId(),userId);
		assertEquals(user.getUsername(),USER_NAMES[0]);
		assertEquals(user.getEmail(),EMAIL[0]);
		assertTrue(delete);
	}
	
	/**
	 * Tests if the deleting user that doesn't exist will not succeed.
	 */
	@Test
	public void testDeleteUserThatDoesNotExist() {
		boolean result = userDao.deleteUser(0);
		assertFalse(result);
	}
	
	/**
	 * Tests if the deleteUser function of UserDao works properly.
	 */
	@Test
	public void testDeleteUser() {
		userDao.createNewUser(createOneUser());
		long userId = userDao.findUserId(USER_NAMES[0]);
		boolean delete = userDao.deleteUser(userId);
		userId = userDao.findUserId(USER_NAMES[0]);
		assertEquals(0,userId);
		assertTrue(delete);
	}
	
	/**
	 * To check if the changePassword() funciton of userDao is working fine.
	 */
	@Test
	public void testChangePassword(){
		userDao.createNewUser(createOneUser());
		long userId = userDao.findUserId(USER_NAMES[0]);
		userDao.changePassword(userId, PASS_WORD[1]);
		User user = userDao.getUserProfile(USER_NAMES[0]);
		userDao.deleteUser(userId);
		assertEquals(user.getUserId(),userId);
		assertEquals(user.getPassword(),PASS_WORD[1]);
	}
	
	
	/**
	 * Test changeEmail function of the UserDao.
	 */
	@Test
	public void testChangeEmail(){
		userDao.createNewUser(createOneUser());
		long userId = userDao.findUserId(USER_NAMES[0]);
		boolean oResult = userDao.changeEmail(userId, EMAIL[1]);
		User user = userDao.getUserProfile(USER_NAMES[0]);
		userDao.deleteUser(userId);
		assertTrue(oResult);
		assertEquals(user.getUserId(),userId);
		assertEquals(user.getEmail(),EMAIL[1]);
	}
	
	/**
	 * Test changeFirstNameLastName from UserDao.
	 */
	@Test
	public void testChangeFirstNameLastName(){
		userDao.createNewUser(createOneUser());
		long userId = userDao.findUserId(USER_NAMES[0]);
		boolean oResult = userDao.updateFirstAndLastName(userId, FIRST_NAME[2], LAST_NAME[3]);
		User user = userDao.getUserProfile(USER_NAMES[0]);
		userDao.deleteUser(userId);
		assertTrue(oResult);
		assertEquals(user.getUserId(),userId);
		assertEquals(user.getFirstName(),FIRST_NAME[2]);
		assertEquals(user.getLastName(),LAST_NAME[3]);
	}
	
	/**
	 * Test if the getUserProfile function of UserDao works fine.
	 */
	public void testGetUserProfile() {
		userDao.createNewUser(createOneUser());
		long userId = userDao.findUserId(USER_NAMES[0]);
		User user = userDao.getUserProfile(USER_NAMES[0]);
		userDao.deleteUser(userId);
		assertEquals(user.getUserId(),userId);
		assertEquals(user.getUsername(),USER_NAMES[0]);
		assertEquals(user.getEmail(),EMAIL[0]);
	}
}
