package com.Blog.Dao;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import com.Blog.Hibernate.HibernateDao;
import com.Blog.Service.IUsers;
import com.Blog.beans.Users;

public class UsersDao implements IUsers{
	public static SessionFactory factory;

	public UsersDao() {
		factory = HibernateDao.openSession();
	}

	@Override
	public boolean createNewUser(Users user) {
		Session session = factory.openSession();
		Transaction tx = null;
		Long id = new Long(0);
		try {
			Date time = new Date();
			tx = session.beginTransaction();
			user.setUserSince(time);
			id = (Long) session.save(user);
			tx.commit();
		} catch (HibernateException e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		} finally {
			session.close();
		}
		return id.longValue() > 0;
	}

	@Override
	public boolean changePassword(long userId, String newPassword) {
		Session session = factory.openSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			User user = (User) session.get(User.class, userId);
			user.setPassword(newPassword);
			session.update(user);
			tx.commit();
		} catch (HibernateException e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		} finally {
			session.close();
		}
		return false;
	}

	@Override
	public boolean changeEmail(long userId, String newEmail) {
		Session session = factory.openSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			User user = (User) session.get(User.class, userId);
			user.setEmail(newEmail);
			session.update(user);
			tx.commit();
		} catch (HibernateException e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		} finally {
			session.close();
		}
		return true;
	}

	@Override
	public boolean updateFirstAndLastName(long userId, String fName,
			String lName) {
		Session session = factory.openSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			User user = (User) session.get(User.class, userId);
			user.setFirstName(fName);
			user.setLastName(lName);
			session.update(user);
			tx.commit();
		} catch (HibernateException e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		}
		return true;
	}

	@Override
	public long findUserId(String userName) {
		try{
			Session session = factory.openSession();
			Long userId = (Long) session.createQuery("Select u.userId from User as u where u.username = :userName").setParameter("userName", userName).uniqueResult();
			session.close();
			return userId.longValue();
		}catch(NullPointerException e){
			return 0;
		}
	}

	@Override
	public Users getLikesCommentsAndBlogs(Users user) {
		Session session = factory.openSession();
		@SuppressWarnings("unchecked")
		List<Long> like = session.createQuery("Select l.blogId from Likes as l where l.userId = :userId").setParameter("userId", user.getUserId()).list();
		@SuppressWarnings("unchecked")
		List<Long> blog = session.createQuery("Select b.blogId from Blog as b where b.userId = :userId").setParameter(":userId", user.getUserId()).list();
		@SuppressWarnings("unchecked")
		List<Long> comment = session.createQuery("Seelct c.commentId from Comment as c where c.userId = :userId").setParameter(":userId", user.getUserId()).list();
		Set<Long> likeList = new HashSet<Long>(like);
		Set<Long> blogList = new HashSet<Long>(blog);
		Set<Long> commentList = new HashSet<Long>(comment);
		user.setLikes(likeList);
		user.setBlogs(blogList);
		user.setComments(commentList);
		return user;
	}

	@Override
	public boolean deleteUser(long userId) {
		Session session = factory.openSession();
		int result = session.createQuery("Delete User where userId = :userId").setParameter("userId", userId).executeUpdate();
		session.close();
		return result>0;
	}

	@Override
	public Users getUser(String userName) {
		Session session = factory.openSession();
		Users user = (Users) session.createQuery("From User where username = :username").setParameter("username",userName).uniqueResult();
		//user = getLikesCommentsAndBlogs(user);
		return user;
	}
}
